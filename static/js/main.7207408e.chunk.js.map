{"version":3,"sources":["App.styled.jsx","components/Container/Container.styled.jsx","components/Container/Container.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","App.js","index.js"],"names":["ContactTitle","styled","h2","Title","p","MainContainer","div","Container","title","children","size","defaultProps","LabelName","label","Search","input","BtnContact","button","FormSt","form","ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","addNewContact","reset","id","onSubmit","this","type","onChange","pattern","required","Component","ContactItem","li","BtnDelete","ContactList","contacts","deleteContact","map","onClick","FilteredName","FilteredInput","Filter","filteredValue","App","filter","handleSubmitForm","shortid","generate","some","contact","toLowerCase","alert","prevState","onDeleteContact","handleFilteredInput","target","onFilteredContacts","normalizedFilter","trim","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7207408e.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactTitle = styled.h2`\nmargin-top: 30px;\n`;","import styled from '@emotion/styled';\n\nexport const Title = styled.p`\nfont-size: 40px;\nfont-weight: 900;\nmargin: 20px 0px 30px 10px;\ndisplay: inline-flex;\n\n`;\n\nexport const MainContainer = styled.div`\nmargin-left: 20px;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AiFillPhone } from 'react-icons/ai';\n\nimport { Title, MainContainer } from './Container.styled';\n\nfunction Container({ title, children }) {\n  return (\n    <MainContainer>\n      <AiFillPhone size={30} />\n      <Title>{title}</Title>\n      {children}\n    </MainContainer>\n  );\n}\n\nContainer.defaultProps = {\n  children: [],\n};\n\nContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import styled from '@emotion/styled';\n\nexport const LabelName = styled.label`\ndisplay: block;\nmargin-right: 20px;\nmargin-bottom: 10px;\n`;\n\nexport const Search = styled.input`\ndisplay: block;\nmargin-top: 10px;\n`;\n\nexport const BtnContact = styled.button`\nfont-size: 10px;\nfont-weight: 700;\nbackground-color: #fff;\nborder: 2px solid grey;\nmargin-top: 10px;\nmargin-bottom: 30px;\nwidth: 130px;\ncursor: pointer;\n\npadding: 5px 15px;\ntext-align: center;\n&:hover {\n    color: blue;\n}\n`;\n\nexport const FormSt = styled.form`\nborder: 2px solid grey;\n  width: 300px;\n  height: 150px;\n  padding: 10px;\n\n`;","import React, { Component } from 'react';\nimport { LabelName, Search, BtnContact, FormSt } from './ContactForm.styled';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  //метод, который будет обновлять состояние input\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  //метод для отправки form\n  handleSubmit = e => {\n    //функция, чтобы старница не перезагружалась при submit\n    e.preventDefault();\n\n    //передаем props Компонента ContactForm (ребенка) в Компонент App (родитель)\n    this.props.addNewContact(this.state);\n    //после submit сбрасываем все поля input\n    this.reset();\n  };\n\n  //метод, который сбрасывает все поля input\n  reset = () => {\n    this.setState({\n      id: '',\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <FormSt onSubmit={this.handleSubmit}>\n        <LabelName>\n          {' '}\n          Name\n          <Search\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </LabelName>\n        <LabelName>\n          Number\n          <Search\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </LabelName>\n        <BtnContact type=\"submit\">Add contact</BtnContact>\n      </FormSt>\n    );\n  }\n}\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\nfont-size: 15px;\ndisplay: flex;\nmargin: 20px 20px;\n\n`;\n\nexport const BtnDelete = styled.button`\nmargin-left: 10px;\ncursor: pointer;\nbackground-color: #fff;\nborder: 1px solid grey;\n`;","import React from 'react';\nimport { ContactItem, BtnDelete } from './ContactList.styled';\nimport PropTypes from 'prop-types';\n\nfunction ContactList({ title, contacts, deleteContact }) {\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => (\n        <ContactItem key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <BtnDelete type=\"button\" onClick={() => deleteContact(id)}>\n            Delete\n          </BtnDelete>\n        </ContactItem>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  title: PropTypes.string.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilteredName = styled.label`\ndisplay: inline-block;\nmargin-right: 20px;\nmargin-top: 20px;\n`;\nexport const FilteredInput= styled.input`\ndisplay: flex;\nmargin-right: 20px;\nmargin-top: 10px;\n`;","import React from 'react';\nimport { FilteredName, FilteredInput } from './Filter.styled';\nimport PropTypes from 'prop-types';\n\nfunction Filter({ value, filteredValue }) {\n  return (\n    <>\n      <form>\n        <FilteredName>\n          {' '}\n          Find contacts by name\n          <FilteredInput\n            type=\"text\"\n            name=\"filter\"\n            value={value}\n            onChange={filteredValue}\n          />\n        </FilteredName>\n      </form>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  filteredValue: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\n\nimport { ContactTitle } from './App.styled';\n\nimport Container from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    // contacts: [],\n    filter: '',\n    name: '',\n    number: '',\n  };\n\n  //метод добавления нового контакта\n  handleSubmitForm = ({ name, number }) => {\n    const addNewContact = {\n      id: shortid.generate(),\n      //короткая запись свойств объекта\n      name,\n      number,\n    };\n\n    //проверка на дублируемый номер телефона\n    this.state.contacts.some(\n      contact =>\n        contact.name.toLowerCase() === addNewContact.name.toLowerCase(),\n    )\n      ? alert(`${name} is already in contacts`)\n      : this.setState(prevState => ({\n          contacts: [addNewContact, ...prevState.contacts],\n        }));\n  };\n\n  // componentDidMount = () => {\n  //   const contacts = JSON.parse(localStorage.getItem('contacts'));\n  //   if (contacts !== null) {\n  //     this.setState({\n  //       contacts,\n  //     });\n  //   }\n  // };\n\n  //метод забирает данные из локального хранилища\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  //метод забирает данные из локального хранилища\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n    //проверка: если предыдущие контакты не равны следующим контактам, тогда записываем контакты в локальное хранилище\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  // componentDidUpdate = (prevProps, prevState) => {\n  //   localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  // };\n\n  //метод для удаления контакта\n  onDeleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  //метод-фильтр (прослушивание input)\n  handleFilteredInput = e => {\n    this.setState({\n      filter: e.target.value,\n    });\n  };\n\n  //метод для фильтра контактов\n  onFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    //приводим текс к нижнему регистру и удаляем пробелы по бокам\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().trim().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    //деструктуризация\n    const { filter } = this.state;\n\n    return (\n      <Container title=\"Phonebook\">\n        <ContactForm addNewContact={this.handleSubmitForm} />\n        <ContactTitle>Contacts</ContactTitle>\n        <Filter value={filter} filteredValue={this.handleFilteredInput} />\n        <ContactList\n          title=\"Contacts\"\n          deleteContact={this.onDeleteContact}\n          contacts={this.onFilteredContacts()}\n        ></ContactList>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}